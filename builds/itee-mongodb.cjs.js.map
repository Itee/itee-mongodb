{"version":3,"file":"itee-mongodb.cjs.js","sources":["../sources/TMongooseController.js","../node_modules/itee-validators/sources/cores/functions/isFunction.js","../node_modules/itee-validators/sources/file-system/paths/isValidPath.js","../node_modules/itee-validators/sources/cores/voids/isDefined.js","../node_modules/itee-validators/sources/cores/strings/isString.js","../node_modules/itee-validators/sources/file-system/directories/isDirectoryPath.js","../node_modules/itee-validators/sources/file-system/directories/isValidDirectoryPath.js","../node_modules/itee-validators/sources/file-system/files/isFilePath.js","../node_modules/itee-validators/sources/file-system/files/isEmptyFile.js","../sources/TMongoDBPlugin.js","../sources/TMongoDBDatabase.js"],"sourcesContent":["/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @class TMongooseController\n * @classdesc The TMongooseController is the base class to perform CRUD operations on the database\n */\n\nimport { TAbstractDataController } from 'itee-database'\nimport {\n    isEmptyArray,\n    isNull,\n    isUndefined\n}                                  from 'itee-validators'\nimport Mongoose                    from 'mongoose'\n\nclass TMongooseController extends TAbstractDataController {\n\n    constructor( parameters = {} ) {\n\n        const _parameters = {\n            ...{\n                schemaName: ''\n            },\n            ...parameters,\n            ...{\n                driver: Mongoose\n            }\n        }\n\n        super( _parameters )\n\n        this.databaseSchema = this._driver.model( _parameters.schemaName )\n\n    }\n\n    get databaseSchema() {\n\n        return this._databaseSchema\n\n    }\n\n    set databaseSchema( value ) {\n\n        if ( isNull( value ) ) { throw new TypeError( 'Database schema cannot be null.' ) }\n        if ( isUndefined( value ) ) { throw new TypeError( 'Database schema cannot be undefined.' ) }\n\n        this._databaseSchema = value\n\n    }\n\n    setDatabaseSchema( value ) {\n\n        this.databaseSchema = value\n        return this\n\n    }\n\n    _createMany( datas, response ) {\n        super._createMany( datas, response )\n\n        this._databaseSchema.create( datas, this.return( response ) )\n\n    }\n\n    // Create\n    _createOne( data, response ) {\n        super._createOne( data, response )\n\n        this._databaseSchema.create( data, this.return( response ) )\n\n    }\n\n    _deleteAll( response ) {\n        super._deleteAll( response )\n\n        this._databaseSchema.collection.drop( TMongooseController.return( response ) )\n\n    }\n\n    _deleteMany( ids, response ) {\n        super._deleteMany( ids, response )\n\n        this._databaseSchema.deleteMany( { '_id': { $in: ids } }, this.return( response ) )\n\n    }\n\n    // Delete\n    _deleteOne( id, response ) {\n        super._deleteOne( id, response )\n\n        this._databaseSchema\n            .findByIdAndDelete( id )\n            .then( data => TMongooseController.returnData( data, response ) )\n            .catch( error => TMongooseController.returnError( error, response ) )\n\n    }\n\n    _deleteWhere( query, response ) {\n        super._deleteWhere( query, response )\n\n        this._databaseSchema.deleteMany( query, this.return( response ) )\n\n    }\n\n    _readAll( projection, response ) {\n        super._readAll( projection, response )\n\n        this._databaseSchema\n            .find( {}, projection )\n            .lean()\n            .exec()\n            .then( data => TMongooseController.returnData( data, response ) )\n            .catch( error => TMongooseController.returnError( error, response ) )\n\n    }\n\n    _readMany( ids, projection, response ) {\n        super._readMany( ids, projection, response )\n\n        this._databaseSchema\n            .find( { '_id': { $in: ids } }, projection )\n            .lean()\n            .exec()\n            .then( ( data ) => {\n\n                if ( isNull( data ) || isEmptyArray( data ) ) {\n                    TMongooseController.returnNotFound( response )\n                } else if ( ids.length !== data.length ) {\n                    TMongooseController.returnErrorAndData( {\n                        title:   'Missing data',\n                        message: 'Some requested objects could not be found.'\n                    }, data, response )\n                } else {\n                    TMongooseController.returnData( data, response )\n                }\n\n            } )\n            .catch( error => TMongooseController.returnError( error, response ) )\n\n    }\n\n    // Read\n    _readOne( id, projection, response ) {\n        super._readOne( id, projection, response )\n\n        this._databaseSchema\n            .findById( id, projection )\n            .lean()\n            .exec()\n            .then( ( data ) => {\n\n                if ( isNull( data ) ) {\n                    TMongooseController.returnNotFound( response )\n                } else {\n                    TMongooseController.returnData( data, response )\n                }\n\n            } )\n            .catch( error => TMongooseController.returnError( error, response ) )\n\n    }\n\n    _readWhere( query, projection, response ) {\n        super._readWhere( query, projection, response )\n\n        this._databaseSchema\n            .find( query, projection )\n            .lean()\n            .exec()\n            .then( data => TMongooseController.returnData( data, response ) )\n            .catch( error => TMongooseController.returnError( error, response ) )\n\n    }\n\n    _updateAll( update, response ) {\n        super._updateAll( update, response )\n\n        this._databaseSchema.update( {}, update, { multi: true }, TMongooseController.return( response ) )\n\n    }\n\n    _updateMany( ids, updates, response ) {\n        super._updateMany( ids, updates, response )\n\n        this._databaseSchema.update( { _id: { $in: ids } }, updates, { multi: true }, TMongooseController.return( response ) )\n\n    }\n\n    // Update\n    _updateOne( id, update, response ) {\n        super._updateOne( id, update, response )\n\n        this._databaseSchema\n            .findByIdAndUpdate( id, update )\n            .exec()\n            .then( data => TMongooseController.returnData( data, response ) )\n            .catch( error => TMongooseController.returnError( error, response ) )\n\n    }\n\n    _updateWhere( query, update, response ) {\n        super._updateWhere( query, update, response )\n\n        this._databaseSchema.update( query, update, { multi: true }, TMongooseController.return( response ) )\n\n    }\n\n}\n\nexport { TMongooseController }\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/cores/functions/isFunction\n * @desc Export function to validate if a value is a function or not\n * @example\n *\n * import { isFunction } from 'itee-validators'\n *\n * if( isFunction( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\n/**\n * Check if given data is a function\n *\n * @param data {*} The data to check against the functionality\n * @returns {boolean} true if data is a function, false otherwise.\n */\nexport function isFunction( data ) {\n    return ( typeof data === 'function' )\n}\n\n/**\n * Check if given data is not a function\n *\n * @param data {*} The data to check against the functionality\n * @returns {boolean} true if data is not a function, false otherwise.\n */\nexport function isNotFunction( data ) {\n    return ( typeof data !== 'function' )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/file-system/paths/isValidPath\n * @description Export function to validate if a value is a valid path\n *\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\n *\n * @example\n *\n * import { isValidPath } from 'itee-validators'\n *\n * if( isValidPath( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\nimport { existsSync } from 'fs'\n\n/**\n * Check if given data is a valid file path\n *\n * @param data {*} The data to check against the path type\n * @returns {boolean} true if data is a valid path, false otherwise\n */\nexport function isValidPath( data ) {\n    return existsSync( data )\n}\n\n/**\n * Check if given data is not a valid file path\n *\n * @param data {*} The data to check against the path type\n * @returns {boolean} true if data is a valid path, false otherwise\n */\nexport function isInvalidPath( data ) {\n    return !isValidPath( data )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/cores/voids/isDefined\n * @desc Export function to validate if a value is a defined or not\n * @example\n *\n * import { isDefined } from 'itee-validators'\n *\n * if( isDefined( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\n/**\n * Check if given data is not null and not undefined\n *\n * @param data {*} The data to check against the existence\n * @returns {boolean} true if data is not null and not undefined, false otherwise.\n */\nexport function isDefined( data ) {\n    return ( ( data !== null ) && ( typeof data !== 'undefined' ) )\n}\n\n/**\n * Check if given data is null or undefined\n *\n * @param data {*} The data to check against the existence\n * @returns {boolean} true if data is null or undefined, false otherwise.\n */\nexport function isNotDefined( data ) {\n    return ( ( data === null ) || ( typeof data === 'undefined' ) )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/cores/strings/isString\n * @desc Export function to validate if a value is a string\n * @example\n *\n * import { isString } from 'itee-validators'\n *\n * if( isString( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\n/**\n * Check if given data is a string\n *\n * @param data {*} The data to check against the string type\n * @returns {boolean} true if data is a string, false otherwise.\n */\nexport function isString( data ) {\n    return ( typeof data === 'string' || data instanceof String )\n}\n\n/**\n * Check if given data is not a string\n *\n * @param data {*} The data to check against the string type\n * @returns {boolean} true if data is not a string, false otherwise.\n */\nexport function isNotString( data ) {\n    return !isString( data )\n}\n\n// #if IS_REMOVE_ON_BUILD\n\nexport function isString_0( val ) {\n    return ( typeof val === 'string' )\n}\n\nexport function isString_1( val ) {\n    return ( typeof val === 'string' || ( ( !!val && typeof val === 'object' ) && Object.prototype.toString.call( val ) === '[object String]' ) )\n}\n\nexport function isString_2( val ) {\n    return ( Object.prototype.toString.call( val ) === '[object String]' )\n}\n\nexport function isString_3( val ) {\n    return ( val !== null && val !== undefined && val.constructor === String )\n}\n\nexport function isString_4( val ) {\n    return ( val === val + '' )\n}\n\n// #endif\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/file-system/directories/isDirectoryPath\n * @description Export function to validate if a value is a directories path\n *\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\n *\n * @example\n *\n * import { isDirectoryPath } from 'itee-validators'\n *\n * if( isDirectoryPath( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\nimport { statSync }    from 'fs'\nimport { isDefined }   from '../../cores/voids/isDefined'\nimport { isNotString } from '../../cores/strings/isString'\n\n/**\n * Check if given path is a directory path\n *\n * @param path {string|Buffer|URL} The data to check against the directory path type\n * @returns {boolean} true if path is a directory path, false otherwise\n */\nexport function isDirectoryPath( path ) {\n    if ( isNotString( path ) && !( path instanceof Buffer ) && !( path instanceof URL ) ) {\n        return false\n        // throw new TypeError( 'Invalid path type! Expect string, buffer or url.' )\n    }\n\n    const stat = statSync( path, { throwIfNoEntry: false } )\n    return isDefined( stat ) && stat.isDirectory()\n}\n\n/**\n * Check if given path is a not directory path\n *\n * @param path {string|Buffer|URL} The data to check against the directory path type\n * @returns {boolean} true if path is a not directory path, false otherwise\n */\nexport function isNotDirectoryPath( path ) {\n    return !isDirectoryPath( path )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/file-system/directories/isValidDirectoryPath\n * @description Export function to validate if a value is a valid directory path\n * @example\n *\n * import { isValidDirectoryPath } from 'itee-validators'\n *\n * if( isValidDirectoryPath( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\nimport { isValidPath }     from '../paths/isValidPath'\nimport { isDirectoryPath } from './isDirectoryPath'\n\n/**\n * Check if given data is a valid directory path\n *\n * @param data {*} The data to check against the directory path type\n * @returns {boolean} true if data is a valid directory path, false otherwise\n */\nexport function isValidDirectoryPath( data ) {\n    return ( isValidPath( data ) && isDirectoryPath( data ) )\n}\n\n/**\n * Check if given data is an invalid directory path\n *\n * @param data {*} The data to check against the directory path type\n * @returns {boolean} true if data is an invalid directory path, false otherwise\n */\nexport function isInvalidDirectoryPath( data ) {\n    return !isValidDirectoryPath( data )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/file-system/files/isFilePath\n * @description Export function to validate if a value is a file path\n *\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\n *\n * @example\n *\n * import { isFilePath } from 'itee-validators'\n *\n * if( isFilePath( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\nimport { statSync }    from 'fs'\nimport { isDefined }   from '../../cores/voids/isDefined'\nimport { isNotString } from '../../cores/strings/isString'\n\n/**\n * Check if given path is a file path\n *\n * @param path {string|Buffer|URL} The data to check against the file path type\n * @returns {boolean} true if path is a file path, false otherwise\n */\nexport function isFilePath( path ) {\n    if ( isNotString( path ) && !( path instanceof Buffer ) && !( path instanceof URL ) ) {\n        return false\n        // throw new TypeError( 'Invalid path type! Expect string, buffer or url.' )\n    }\n\n    const stat = statSync( path, { throwIfNoEntry: false } )\n    return isDefined( stat ) && stat.isFile()\n}\n\n/**\n * Check if given path is not a file path\n *\n * @param path {string|Buffer|URL} The data to check against the file path type\n * @returns {boolean} true if path is not a file path, false otherwise\n */\nexport function isNotFilePath( path ) {\n    return !isFilePath( path )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @module sources/file-system/files/isEmptyFile\n * @description Export function to validate if a value is an empty file\n *\n * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}\n *\n * @example\n *\n * import { isEmptyFile } from 'itee-validators'\n *\n * if( isEmptyFile( value ) ) {\n *     //...\n * } else {\n *     //...\n * }\n *\n */\n\nimport { statSync }    from 'fs'\nimport { isFilePath }  from './isFilePath'\nimport { isNotString } from '../../cores/strings/isString'\n\n/**\n * Check if given file path is an empty file more or less a threshold in bytes.\n *\n * @param filePath {string|Buffer|URL} The directory path to check the emptiness\n * @param threshold {number} An amount of byte below which it consider the file as empty ( 0 as default ).\n * @returns {boolean} true if file is empty, false otherwise\n */\nexport function isEmptyFile( filePath, threshold = 0 ) {\n    if ( isNotString( filePath ) && !( filePath instanceof Buffer ) && !( filePath instanceof URL ) ) {\n        return false\n        // throw new TypeError( 'Invalid path type! Expect string, buffer or url.' )\n    }\n\n    return isFilePath( filePath ) && ( statSync( filePath ).size <= threshold )\n}\n\n/**\n * Check if given file path is not an empty file more or less a threshold in bytes.\n *\n * @param filePath {string|Buffer|URL} The directory path to check the emptiness\n * @param threshold {number} An amount of byte above which it consider the file as not empty ( 0 as default ).\n * @returns {boolean} true if file is not empty, false otherwise\n */\nexport function isNotEmptyFile( filePath, threshold = 0 ) {\n    return !isEmptyFile( filePath, threshold )\n}\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @file Todo\n *\n * @example Todo\n *\n */\n\nimport { TAbstractDatabasePlugin } from 'itee-database'\nimport { getFilesPathsUnder }      from 'itee-utils'\nimport { isFunction }              from 'itee-validators/sources/cores/functions/isFunction'\nimport { isInvalidDirectoryPath }  from 'itee-validators/sources/file-system/directories/isValidDirectoryPath'\nimport { isEmptyFile }             from 'itee-validators/sources/file-system/files/isEmptyFile'\nimport { join }                    from 'path'\n\nclass TMongoDBPlugin extends TAbstractDatabasePlugin {\n\n    constructor( parameters = {} ) {\n\n        const _parameters = {\n            ...{\n                types:   [],\n                schemas: []\n            },\n            ...parameters\n        }\n\n        super( _parameters )\n\n        this.types   = _parameters.types\n        this.schemas = _parameters.schemas\n\n    }\n\n    get schemas() {\n        return this._schemas\n    }\n\n    set schemas( value ) {\n        this._schemas = value\n    }\n\n    get types() {\n        return this._types\n    }\n\n    set types( value ) {\n        this._types = value\n    }\n\n    addSchema( value ) {\n\n        this._schemas.push( value )\n        return this\n\n    }\n\n    addType( value ) {\n\n        this._types.push( value )\n        return this\n\n    }\n\n    beforeRegisterRoutes( Mongoose ) {\n\n        super.beforeRegisterRoutes( Mongoose )\n\n        this._searchLocalTypes()\n        this._registerTypes( Mongoose )\n\n        this._searchLocalSchemas()\n        this._registerSchemas( Mongoose )\n\n    }\n\n    _searchLocalTypes() {\n\n        const typesBasePath = join( this.__dirname, 'types' )\n        if ( isInvalidDirectoryPath( typesBasePath ) ) {\n            this.logger.warn( `Unable to find \"types\" folder for path \"${ typesBasePath }\"` )\n            return\n        } else {\n            this.logger.log( `Add types from: ${ typesBasePath }` )\n        }\n\n        const typesFilesPaths = getFilesPathsUnder( typesBasePath )\n        let typeFilePath      = ''\n        let typeFile          = undefined\n\n        for ( let typeIndex = 0, numberOfTypes = typesFilesPaths.length ; typeIndex < numberOfTypes ; typeIndex++ ) {\n\n            typeFilePath = typesFilesPaths[ typeIndex ]\n            typeFile     = require( typeFilePath )\n            this._types.push( typeFile )\n\n        }\n\n    }\n\n    _registerTypes( Mongoose ) {\n\n        for ( let type of this._types ) {\n\n            this.logger.log( `Register type: ${ type.name }` )\n            type( Mongoose )\n\n        }\n\n    }\n\n    _searchLocalSchemas() {\n\n        const localSchemasBasePath = join( this.__dirname, 'schemas' )\n        if ( isInvalidDirectoryPath( localSchemasBasePath ) ) {\n            this.logger.warn( `Unable to find \"schemas\" folder for path \"${ localSchemasBasePath }\"` )\n            return\n        } else {\n            this.logger.log( `Add schemas from: ${ localSchemasBasePath }` )\n        }\n\n        const localSchemasFilesPaths = getFilesPathsUnder( localSchemasBasePath )\n        let localSchemaFilePath      = ''\n        let localSchemaFile          = undefined\n        for ( let schemaIndex = 0, numberOfSchemas = localSchemasFilesPaths.length ; schemaIndex < numberOfSchemas ; schemaIndex++ ) {\n\n            localSchemaFilePath = localSchemasFilesPaths[ schemaIndex ]\n\n            if ( isEmptyFile( localSchemaFilePath ) ) {\n\n                this.logger.warn( `Skip empty local database schema: ${ localSchemaFilePath }` )\n                continue\n\n            }\n\n            localSchemaFile = require( localSchemaFilePath )\n            this._schemas.push( localSchemaFile )\n\n        }\n\n    }\n\n    _registerSchemas( Mongoose ) {\n\n        for ( let schema of this._schemas ) {\n\n            this.logger.log( `Register schema: ${ schema.name }` )\n\n            if ( isFunction( schema.registerModelTo ) ) {\n\n                schema.registerModelTo( Mongoose )\n\n            } else if ( isFunction( schema ) ) {\n\n                schema( Mongoose )\n\n            } else {\n\n                this.logger.error( `Unable to register local database schema: ${ schema }` )\n\n            }\n\n        }\n\n    }\n\n}\n\nexport { TMongoDBPlugin }\n","/**\n * @author [Tristan Valcke]{@link https://github.com/Itee}\n * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}\n *\n * @file Todo\n *\n * @example Todo\n *\n */\n\nimport { TAbstractDatabase } from 'itee-database'\nimport Mongoose              from 'mongoose'\n\nclass TMongoDBDatabase extends TAbstractDatabase {\n\n    constructor( parameters = {} ) {\n\n        const _parameters = {\n            ...{\n                databaseUrl:     '',\n                databaseOptions: {\n                    useNewUrlParser:    true,\n                    useUnifiedTopology: true\n                }\n            },\n            ...parameters,\n            ...{\n                driver: Mongoose\n            }\n        }\n\n        super( _parameters )\n\n        this.databaseUrl     = _parameters.databaseUrl\n        this.databaseOptions = _parameters.databaseOptions\n\n    }\n\n    close( onCloseCallback ) {\n\n        this._driver.connection.close( onCloseCallback )\n\n    }\n\n    connect() {\n\n        this._driver\n            .connect( this.databaseUrl, this.databaseOptions )\n            .then( ( info ) => {\n                this.logger.log( info )\n            } )\n            .then( ( /*info*/ ) => {\n                const regex      = /:(\\w*)@/g\n                const matchs     = this.databaseUrl.match( regex )\n                const escapedUrl = ( matchs )\n                                   ? this.databaseUrl.replace( matchs[ 0 ], ':*******@' )\n                                   : this.databaseUrl\n\n                this.logger.log( `MongoDB at ${ escapedUrl } is connected !` )\n            } )\n            // .then( ( what ) => {\n            //     this.logger.log( `MongoDB at ${ escapedUrl } is connected !` )\n            // } )\n            .catch( ( err ) => {\n                this.logger.error( err )\n            } )\n\n    }\n\n    init() {\n        super.init()\n\n    }\n\n    on( eventName, callback ) {\n\n        const availableEventNames = [ 'connecting', 'connected', 'open', 'disconnecting', 'disconnected', 'reconnected', 'close', 'error' ]\n\n        if ( availableEventNames.indexOf( eventName ) === -1 ) {\n            return\n        }\n\n        this._driver.connection.on( eventName, callback )\n\n    }\n\n}\n\nexport { TMongoDBDatabase }\n"],"names":["TAbstractDataController","Mongoose","isNull","isUndefined","isEmptyArray","existsSync","statSync","TAbstractDatabasePlugin","join","getFilesPathsUnder","TAbstractDatabase"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8]}