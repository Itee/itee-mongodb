"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("itee-database"),t=require("itee-validators"),a=require("mongoose"),s=require("itee-utils"),r=require("path");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=n(a);
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TMongooseController
 * @classdesc The TMongooseController is the base class to perform CRUD operations on the database
 */class h extends e.TAbstractDataController{constructor(e={}){const t={schemaName:"",...e,driver:i.default};super(t),this.databaseSchema=this._driver.model(t.schemaName)}get databaseSchema(){return this._databaseSchema}set databaseSchema(e){if(t.isNull(e))throw new TypeError("Database schema cannot be null.");if(t.isUndefined(e))throw new TypeError("Database schema cannot be undefined.");this._databaseSchema=e}setDatabaseSchema(e){return this.databaseSchema=e,this}_createMany(e,t){super._createMany(e,t),this._databaseSchema.create(e,this.return(t))}_createOne(e,t){super._createOne(e,t),this._databaseSchema.create(e,this.return(t))}_deleteAll(e){super._deleteAll(e),this._databaseSchema.collection.drop(h.return(e))}_deleteMany(e,t){super._deleteMany(e,t),this._databaseSchema.deleteMany({_id:{$in:e}},this.return(t))}_deleteOne(e,t){super._deleteOne(e,t),this._databaseSchema.findByIdAndDelete(e).then((e=>h.returnData(e,t))).catch((e=>h.returnError(e,t)))}_deleteWhere(e,t){super._deleteWhere(e,t),this._databaseSchema.deleteMany(e,this.return(t))}_readAll(e,t){super._readAll(e,t),this._databaseSchema.find({},e).lean().exec().then((e=>h.returnData(e,t))).catch((e=>h.returnError(e,t)))}_readMany(e,a,s){super._readMany(e,a,s),this._databaseSchema.find({_id:{$in:e}},a).lean().exec().then((a=>{t.isNull(a)||t.isEmptyArray(a)?h.returnNotFound(s):e.length!==a.length?h.returnErrorAndData({title:"Missing data",message:"Some requested objects could not be found."},a,s):h.returnData(a,s)})).catch((e=>h.returnError(e,s)))}_readOne(e,a,s){super._readOne(e,a,s),this._databaseSchema.findById(e,a).lean().exec().then((e=>{t.isNull(e)?h.returnNotFound(s):h.returnData(e,s)})).catch((e=>h.returnError(e,s)))}_readWhere(e,t,a){super._readWhere(e,t,a),this._databaseSchema.find(e,t).lean().exec().then((e=>h.returnData(e,a))).catch((e=>h.returnError(e,a)))}_updateAll(e,t){super._updateAll(e,t),this._databaseSchema.update({},e,{multi:!0},h.return(t))}_updateMany(e,t,a){super._updateMany(e,t,a),this._databaseSchema.update({_id:{$in:e}},t,{multi:!0},h.return(a))}_updateOne(e,t,a){super._updateOne(e,t,a),this._databaseSchema.findByIdAndUpdate(e,t).exec().then((e=>h.returnData(e,a))).catch((e=>h.returnError(e,a)))}_updateWhere(e,t,a){super._updateWhere(e,t,a),this._databaseSchema.update(e,t,{multi:!0},h.return(a))}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class o extends e.TAbstractDatabasePlugin{constructor(e={}){const t={types:[],schemas:[],...e};super(t),this.types=t.types,this.schemas=t.schemas}get schemas(){return this._schemas}set schemas(e){this._schemas=e}get types(){return this._types}set types(e){this._types=e}addSchema(e){return this._schemas.push(e),this}addType(e){return this._types.push(e),this}beforeRegisterRoutes(e){super.beforeRegisterRoutes(e),this._searchLocalTypes(),this._registerTypes(e),this._searchLocalSchemas(),this._registerSchemas(e)}_searchLocalTypes(){const e=r.join(this.__dirname,"types");if(t.isInvalidDirectoryPath(e))return void this.logger.warn(`Unable to find "types" folder for path "${e}"`);this.logger.log(`Add types from: ${e}`);const a=s.getFilesPathsUnder(e);let n,i="";for(let e=0,t=a.length;e<t;e++)i=a[e],n=require(i),this._types.push(n)}_registerTypes(e){for(let t of this._types)this.logger.log(`Register type: ${t.name}`),t(e)}_searchLocalSchemas(){const e=r.join(this.__dirname,"schemas");if(t.isInvalidDirectoryPath(e))return void this.logger.warn(`Unable to find "schemas" folder for path "${e}"`);this.logger.log(`Add schemas from: ${e}`);const a=s.getFilesPathsUnder(e);let n,i="";for(let e=0,s=a.length;e<s;e++)i=a[e],t.isEmptyFile(i)?this.logger.warn(`Skip empty local database schema: ${i}`):(n=require(i),this._schemas.push(n))}_registerSchemas(e){for(let a of this._schemas)this.logger.log(`Register schema: ${a.name}`),t.isFunction(a.registerModelTo)?a.registerModelTo(e):t.isFunction(a)?a(e):this.logger.error(`Unable to register local database schema: ${a}`)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class c extends e.TAbstractDatabase{constructor(e={}){const t={databaseUrl:"",databaseOptions:{useNewUrlParser:!0,useUnifiedTopology:!0},...e,driver:i.default};super(t),this.databaseUrl=t.databaseUrl,this.databaseOptions=t.databaseOptions}close(e){this._driver.connection.close(e)}connect(){this._driver.connect(this.databaseUrl,this.databaseOptions).then((e=>{this.logger.log(e)})).then((()=>{const e=this.databaseUrl.match(/:(\w*)@/g),t=e?this.databaseUrl.replace(e[0],":*******@"):this.databaseUrl;this.logger.log(`MongoDB at ${t} is connected !`)})).catch((e=>{this.logger.error(e)}))}init(){super.init()}on(e,t){-1!==["connecting","connected","open","disconnecting","disconnected","reconnected","close","error"].indexOf(e)&&this._driver.connection.on(e,t)}}exports.TMongoDBDatabase=c,exports.TMongoDBPlugin=o,exports.TMongooseController=h;
