"use strict";var e=require("itee-database"),t=require("itee-validators"),r=require("mongoose"),a=require("itee-utils"),s=require("fs"),n=require("path");function i(e){return e&&e.__esModule?e:{default:e}}var o=i(r);
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TMongooseController
 * @classdesc The TMongooseController is the base class to perform CRUD operations on the database
 */class c extends e.TAbstractDataController{constructor(e={}){const t={schemaName:"",...e,driver:o.default};super(t),this.databaseSchema=this._driver.model(t.schemaName)}get databaseSchema(){return this._databaseSchema}set databaseSchema(e){if(t.isNull(e))throw new TypeError("Database schema cannot be null.");if(t.isUndefined(e))throw new TypeError("Database schema cannot be undefined.");this._databaseSchema=e}setDatabaseSchema(e){return this.databaseSchema=e,this}_createMany(e,t){super._createMany(e,t),this._databaseSchema.create(e,this.return(t))}_createOne(e,t){super._createOne(e,t),this._databaseSchema.create(e,this.return(t))}_deleteAll(e){super._deleteAll(e),this._databaseSchema.collection.drop(c.return(e))}_deleteMany(e,t){super._deleteMany(e,t),this._databaseSchema.deleteMany({_id:{$in:e}},this.return(t))}_deleteOne(e,t){super._deleteOne(e,t),this._databaseSchema.findByIdAndDelete(e).then(e=>c.returnData(e,t)).catch(e=>c.returnError(e,t))}_deleteWhere(e,t){super._deleteWhere(e,t),this._databaseSchema.deleteMany(e,this.return(t))}_readAll(e,t){super._readAll(e,t),this._databaseSchema.find({},e).lean().exec().then(e=>c.returnData(e,t)).catch(e=>c.returnError(e,t))}_readMany(e,r,a){super._readMany(e,r,a),this._databaseSchema.find({_id:{$in:e}},r).lean().exec().then(r=>{t.isNull(r)||t.isEmptyArray(r)?c.returnNotFound(a):e.length!==r.length?c.returnErrorAndData({title:"Missing data",message:"Some requested objects could not be found."},r,a):c.returnData(r,a)}).catch(e=>c.returnError(e,a))}_readOne(e,r,a){super._readOne(e,r,a),this._databaseSchema.findById(e,r).lean().exec().then(e=>{t.isNull(e)?c.returnNotFound(a):c.returnData(e,a)}).catch(e=>c.returnError(e,a))}_readWhere(e,t,r){super._readWhere(e,t,r),this._databaseSchema.find(e,t).lean().exec().then(e=>c.returnData(e,r)).catch(e=>c.returnError(e,r))}_updateAll(e,t){super._updateAll(e,t),this._databaseSchema.update({},e,{multi:!0},c.return(t))}_updateMany(e,t,r){super._updateMany(e,t,r),this._databaseSchema.update({_id:{$in:e}},t,{multi:!0},c.return(r))}_updateOne(e,t,r){super._updateOne(e,t,r),this._databaseSchema.findByIdAndUpdate(e,t).exec().then(e=>c.returnData(e,r)).catch(e=>c.returnError(e,r))}_updateWhere(e,t,r){super._updateWhere(e,t,r),this._databaseSchema.update(e,t,{multi:!0},c.return(r))}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/functions/isFunction
 * @desc Export function to validate if a value is a function or not
 * @example
 *
 * import { isFunction } from 'itee-validators'
 *
 * if( isFunction( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function h(e){return"function"==typeof e}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/paths/isValidPath
 * @description Export function to validate if a value is a valid path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isValidPath } from 'itee-validators'
 *
 * if( isValidPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/voids/isDefined
 * @desc Export function to validate if a value is a defined or not
 * @example
 *
 * import { isDefined } from 'itee-validators'
 *
 * if( isDefined( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function d(e){return null!=e}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/cores/strings/isString
 * @desc Export function to validate if a value is a string
 * @example
 *
 * import { isString } from 'itee-validators'
 *
 * if( isString( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */function u(e){return!function(e){return"string"==typeof e||e instanceof String}(e)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isDirectoryPath
 * @description Export function to validate if a value is a directories path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isDirectoryPath } from 'itee-validators'
 *
 * if( isDirectoryPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/directories/isValidDirectoryPath
 * @description Export function to validate if a value is a valid directory path
 * @example
 *
 * import { isValidDirectoryPath } from 'itee-validators'
 *
 * if( isValidDirectoryPath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function l(e){return function(e){return s.existsSync(e)}(e)&&function(e){if(u(e)&&!(e instanceof Buffer)&&!(e instanceof URL))return!1;const t=s.statSync(e,{throwIfNoEntry:!1});return d(t)&&t.isDirectory()}(e)}function p(e){return!l(e)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isFilePath
 * @description Export function to validate if a value is a file path
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isFilePath } from 'itee-validators'
 *
 * if( isFilePath( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @module sources/file-system/files/isEmptyFile
 * @description Export function to validate if a value is an empty file
 *
 * @requires {@link module: [fs]{@link https://nodejs.org/api/fs.html}}
 *
 * @example
 *
 * import { isEmptyFile } from 'itee-validators'
 *
 * if( isEmptyFile( value ) ) {
 *     //...
 * } else {
 *     //...
 * }
 *
 */
function _(e,t=0){return(!u(e)||e instanceof Buffer||e instanceof URL)&&(function(e){if(u(e)&&!(e instanceof Buffer)&&!(e instanceof URL))return!1;const t=s.statSync(e,{throwIfNoEntry:!1});return d(t)&&t.isFile()}(e)&&s.statSync(e).size<=t)}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class f extends e.TAbstractDatabasePlugin{constructor(e={}){const t={types:[],schemas:[],...e};super(t),this.types=t.types,this.schemas=t.schemas}get schemas(){return this._schemas}set schemas(e){this._schemas=e}get types(){return this._types}set types(e){this._types=e}addSchema(e){return this._schemas.push(e),this}addType(e){return this._types.push(e),this}beforeRegisterRoutes(e){super.beforeRegisterRoutes(e),this._searchLocalTypes(),this._registerTypes(e),this._searchLocalSchemas(),this._registerSchemas(e)}_searchLocalTypes(){const e=n.join(this.__dirname,"types");if(p(e))return void this.logger.warn(`Unable to find "types" folder for path "${e}"`);this.logger.log(`Add types from: ${e}`);const t=a.getFilesPathsUnder(e);let r,s="";for(let e=0,a=t.length;e<a;e++)s=t[e],r=require(s),this._types.push(r)}_registerTypes(e){for(let t of this._types)this.logger.log(`Register type: ${t.name}`),t(e)}_searchLocalSchemas(){const e=n.join(this.__dirname,"schemas");if(p(e))return void this.logger.warn(`Unable to find "schemas" folder for path "${e}"`);this.logger.log(`Add schemas from: ${e}`);const t=a.getFilesPathsUnder(e);let r,s="";for(let e=0,a=t.length;e<a;e++)s=t[e],_(s)?this.logger.warn(`Skip empty local database schema: ${s}`):(r=require(s),this._schemas.push(r))}_registerSchemas(e){for(let t of this._schemas)this.logger.log(`Register schema: ${t.name}`),h(t.registerModelTo)?t.registerModelTo(e):h(t)?t(e):this.logger.error(`Unable to register local database schema: ${t}`)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class m extends e.TAbstractDatabase{constructor(e={}){const t={databaseUrl:"",databaseOptions:{useNewUrlParser:!0,useUnifiedTopology:!0},...e,driver:o.default};super(t),this.databaseUrl=t.databaseUrl,this.databaseOptions=t.databaseOptions}close(e){this._driver.connection.close(e)}connect(){this._driver.connect(this.databaseUrl,this.databaseOptions).then(e=>{this.logger.log(e)}).then(()=>{const e=this.databaseUrl.match(/:(\w*)@/g),t=e?this.databaseUrl.replace(e[0],":*******@"):this.databaseUrl;this.logger.log(`MongoDB at ${t} is connected !`)}).catch(e=>{this.logger.error(e)})}init(){super.init()}on(e,t){-1!==["connecting","connected","open","disconnecting","disconnected","reconnected","close","error"].indexOf(e)&&this._driver.connection.on(e,t)}}exports.TMongoDBDatabase=m,exports.TMongoDBPlugin=f,exports.TMongooseController=c;
