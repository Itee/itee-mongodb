"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("itee-validators"),t=require("itee-database"),a=require("itee-utils"),r=require("path"),s=require("mongoose");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(a){if("default"!==a){var r=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(t,a,r.get?r:{enumerable:!0,get:function(){return e[a]}})}})),t.default=e,Object.freeze(t)}var o=n(r),h=i(s);
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TMongooseController
 * @classdesc The TMongooseController is the base class to perform CRUD operations on the database
 */
class c extends t.TAbstractDataController{constructor(e={}){const t={driver:null,schemaName:"",...e};super(t),this.databaseSchema=this._driver.model(t.schemaName)}get databaseSchema(){return this._databaseSchema}set databaseSchema(t){if(e.isNull(t))throw new TypeError("Database schema cannot be null.");if(e.isUndefined(t))throw new TypeError("Database schema cannot be undefined.");this._databaseSchema=t}setDatabaseSchema(e){return this.databaseSchema=e,this}_createMany(e,t){super._createMany(e,t),this._databaseSchema.create(e,this.return(t))}_createOne(e,t){super._createOne(e,t),this._databaseSchema.create(e,this.return(t))}_deleteAll(e){super._deleteAll(e),this._databaseSchema.collection.drop(c.return(e))}_deleteMany(e,t){super._deleteMany(e,t),this._databaseSchema.deleteMany({_id:{$in:e}},this.return(t))}_deleteOne(e,t){super._deleteOne(e,t),this._databaseSchema.findByIdAndDelete(e).then((e=>c.returnData(e,t))).catch((e=>c.returnError(e,t)))}_deleteWhere(e,t){super._deleteWhere(e,t),this._databaseSchema.deleteMany(e,this.return(t))}_readAll(e,t){super._readAll(e,t),this._databaseSchema.find({},e).lean().exec().then((e=>c.returnData(e,t))).catch((e=>c.returnError(e,t)))}_readMany(t,a,r){super._readMany(t,a,r),this._databaseSchema.find({_id:{$in:t}},a).lean().exec().then((a=>{e.isNull(a)||e.isEmptyArray(a)?c.returnNotFound(r):t.length!==a.length?c.returnErrorAndData({title:"Missing data",message:"Some requested objects could not be found."},a,r):c.returnData(a,r)})).catch((e=>c.returnError(e,r)))}_readOne(t,a,r){super._readOne(t,a,r),this._databaseSchema.findById(t,a).lean().exec().then((t=>{e.isNull(t)?c.returnNotFound(r):c.returnData(t,r)})).catch((e=>c.returnError(e,r)))}_readWhere(e,t,a){super._readWhere(e,t,a),this._databaseSchema.find(e,t).lean().exec().then((e=>c.returnData(e,a))).catch((e=>c.returnError(e,a)))}_updateAll(e,t){super._updateAll(e,t),this._databaseSchema.update({},e,{multi:!0},c.return(t))}_updateMany(e,t,a){super._updateMany(e,t,a),this._databaseSchema.update({_id:{$in:e}},t,{multi:!0},c.return(a))}_updateOne(e,t,a){super._updateOne(e,t,a),this._databaseSchema.findByIdAndUpdate(e,t).exec().then((e=>c.returnData(e,a))).catch((e=>c.returnError(e,a)))}_updateWhere(e,t,a){super._updateWhere(e,t,a),this._databaseSchema.update(e,t,{multi:!0},c.return(a))}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class d extends t.TAbstractDatabasePlugin{constructor(e={}){const t={types:[],schemas:[],...e};super(t),this.types=t.types,this.schemas=t.schemas}get schemas(){return this._schemas}set schemas(e){this._schemas=e}get types(){return this._types}set types(e){this._types=e}addSchema(e){return this._schemas.push(e),this}addType(e){return this._types.push(e),this}beforeRegisterRoutes(e){super.beforeRegisterRoutes(e),this._searchLocalTypes(),this._registerTypes(e),this._searchLocalSchemas(),this._registerSchemas(e)}_searchLocalTypes(){const t=o.default.join(this.__dirname,"types");if(e.isInvalidDirectoryPath(t))return void this.logger.warn(`Unable to find "types" folder for path "${t}"`);this.logger.log(`Add types from: ${t}`);const r=a.getFilesPathsUnder(t);let s,n="";for(let e=0,t=r.length;e<t;e++)n=r[e],s=require(n),this._types.push(s)}_registerTypes(e){for(let t of this._types)this.logger.log(`Register type: ${t.name}`),t(e)}_searchLocalSchemas(){const t=o.default.join(this.__dirname,"schemas");if(e.isInvalidDirectoryPath(t))return void this.logger.warn(`Unable to find "schemas" folder for path "${t}"`);this.logger.log(`Add schemas from: ${t}`);const r=a.getFilesPathsUnder(t);let s,n="";for(let t=0,a=r.length;t<a;t++)n=r[t],e.isEmptyFile(n)?this.logger.warn(`Skip empty local database schema: ${n}`):(s=require(n),this._schemas.push(s))}_registerSchemas(t){for(let a of this._schemas)this.logger.log(`Register schema: ${a.name}`),e.isFunction(a.registerModelTo)?a.registerModelTo(t):e.isFunction(a)?a(t):this.logger.error(`Unable to register local database schema: ${a}`)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class l extends t.TAbstractDatabase{constructor(e={}){const t={databaseUrl:"",databaseOptions:{useNewUrlParser:!0,useUnifiedTopology:!0},...e,driver:h};super(t),this.databaseUrl=t.databaseUrl,this.databaseOptions=t.databaseOptions}close(e){this._driver.connection.close(e)}connect(){this._driver.connect(this.databaseUrl,this.databaseOptions).then((()=>{this.logger.log(`MongoDB at ${this.databaseUrl} is connected !`)})).catch((e=>{this.logger.error(e)}))}init(){super.init()}on(e,t){-1!==["connecting","connected","open","disconnecting","disconnected","reconnected","close","error"].indexOf(e)&&this._driver.connection.on(e,t)}}exports.TMongoDBDatabase=l,exports.TMongoDBPlugin=d,exports.TMongooseController=c;
