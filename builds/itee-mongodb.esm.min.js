import{TAbstractDataController as e,TAbstractDatabasePlugin as t,TAbstractDatabase as a}from"itee-database";import{isNull as s,isUndefined as r,isEmptyArray as n,isInvalidDirectoryPath as h,isEmptyFile as i,isFunction as o}from"itee-validators";import c from"mongoose";import{getFilesPathsUnder as d}from"itee-utils";import{join as l}from"path";
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TMongooseController
 * @classdesc The TMongooseController is the base class to perform CRUD operations on the database
 */class u extends e{constructor(e={}){const t={schemaName:"",...e,driver:c};super(t),this.databaseSchema=this._driver.model(t.schemaName)}get databaseSchema(){return this._databaseSchema}set databaseSchema(e){if(s(e))throw new TypeError("Database schema cannot be null.");if(r(e))throw new TypeError("Database schema cannot be undefined.");this._databaseSchema=e}setDatabaseSchema(e){return this.databaseSchema=e,this}_createMany(e,t){super._createMany(e,t),this._databaseSchema.create(e,this.return(t))}_createOne(e,t){super._createOne(e,t),this._databaseSchema.create(e,this.return(t))}_deleteAll(e){super._deleteAll(e),this._databaseSchema.collection.drop(u.return(e))}_deleteMany(e,t){super._deleteMany(e,t),this._databaseSchema.deleteMany({_id:{$in:e}},this.return(t))}_deleteOne(e,t){super._deleteOne(e,t),this._databaseSchema.findByIdAndDelete(e).then((e=>u.returnData(e,t))).catch((e=>u.returnError(e,t)))}_deleteWhere(e,t){super._deleteWhere(e,t),this._databaseSchema.deleteMany(e,this.return(t))}_readAll(e,t){super._readAll(e,t),this._databaseSchema.find({},e).lean().exec().then((e=>u.returnData(e,t))).catch((e=>u.returnError(e,t)))}_readMany(e,t,a){super._readMany(e,t,a),this._databaseSchema.find({_id:{$in:e}},t).lean().exec().then((t=>{s(t)||n(t)?u.returnNotFound(a):e.length!==t.length?u.returnErrorAndData({title:"Missing data",message:"Some requested objects could not be found."},t,a):u.returnData(t,a)})).catch((e=>u.returnError(e,a)))}_readOne(e,t,a){super._readOne(e,t,a),this._databaseSchema.findById(e,t).lean().exec().then((e=>{s(e)?u.returnNotFound(a):u.returnData(e,a)})).catch((e=>u.returnError(e,a)))}_readWhere(e,t,a){super._readWhere(e,t,a),this._databaseSchema.find(e,t).lean().exec().then((e=>u.returnData(e,a))).catch((e=>u.returnError(e,a)))}_updateAll(e,t){super._updateAll(e,t),this._databaseSchema.update({},e,{multi:!0},u.return(t))}_updateMany(e,t,a){super._updateMany(e,t,a),this._databaseSchema.update({_id:{$in:e}},t,{multi:!0},u.return(a))}_updateOne(e,t,a){super._updateOne(e,t,a),this._databaseSchema.findByIdAndUpdate(e,t).exec().then((e=>u.returnData(e,a))).catch((e=>u.returnError(e,a)))}_updateWhere(e,t,a){super._updateWhere(e,t,a),this._databaseSchema.update(e,t,{multi:!0},u.return(a))}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class p extends t{constructor(e={}){const t={types:[],schemas:[],...e};super(t),this.types=t.types,this.schemas=t.schemas}get schemas(){return this._schemas}set schemas(e){this._schemas=e}get types(){return this._types}set types(e){this._types=e}addSchema(e){return this._schemas.push(e),this}addType(e){return this._types.push(e),this}beforeRegisterRoutes(e){super.beforeRegisterRoutes(e),this._searchLocalTypes(),this._registerTypes(e),this._searchLocalSchemas(),this._registerSchemas(e)}_searchLocalTypes(){const e=l(this.__dirname,"types");if(h(e))return void this.logger.warn(`Unable to find "types" folder for path "${e}"`);this.logger.log(`Add types from: ${e}`);const t=d(e);let a,s="";for(let e=0,r=t.length;e<r;e++)s=t[e],a=require(s),this._types.push(a)}_registerTypes(e){for(let t of this._types)this.logger.log(`Register type: ${t.name}`),t(e)}_searchLocalSchemas(){const e=l(this.__dirname,"schemas");if(h(e))return void this.logger.warn(`Unable to find "schemas" folder for path "${e}"`);this.logger.log(`Add schemas from: ${e}`);const t=d(e);let a,s="";for(let e=0,r=t.length;e<r;e++)s=t[e],i(s)?this.logger.warn(`Skip empty local database schema: ${s}`):(a=require(s),this._schemas.push(a))}_registerSchemas(e){for(let t of this._schemas)this.logger.log(`Register schema: ${t.name}`),o(t.registerModelTo)?t.registerModelTo(e):o(t)?t(e):this.logger.error(`Unable to register local database schema: ${t}`)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class m extends a{constructor(e={}){const t={databaseUrl:"",databaseOptions:{useNewUrlParser:!0,useUnifiedTopology:!0},...e,driver:c};super(t),this.databaseUrl=t.databaseUrl,this.databaseOptions=t.databaseOptions}close(e){this._driver.connection.close(e)}connect(){this._driver.connect(this.databaseUrl,this.databaseOptions).then((e=>{this.logger.log(e)})).then((()=>{const e=this.databaseUrl.match(/:(\w*)@/g),t=e?this.databaseUrl.replace(e[0],":*******@"):this.databaseUrl;this.logger.log(`MongoDB at ${t} is connected !`)})).catch((e=>{this.logger.error(e)}))}init(){super.init()}on(e,t){-1!==["connecting","connected","open","disconnecting","disconnected","reconnected","close","error"].indexOf(e)&&this._driver.connection.on(e,t)}}export{m as TMongoDBDatabase,p as TMongoDBPlugin,u as TMongooseController};
